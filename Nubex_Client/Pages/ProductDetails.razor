@page "/Product/details/{Id:int}"
@page "/Product/details"
@inject IProductService _ProductService

@inject IJSRuntime jsRuntime

<style>
    .hor-scroll {
        overflow: auto;
        white-space: nowrap;
    }

        .hor-scroll img {
            display: inline-block;
        }
</style>
@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
<main class="mt-5 pt-4">
    <div class="container dark-grey-text mt-5">
        <div class="row wow fadeIn">
            <div class="col-md-6 mb-4">
                <img src="@Product.Image1" class="img-fluid" alt="">
            </div>
            <div class="col-md-6 mb-4">
                <div class="p-4">
                    <h2 class="font-bold">@Product.ProductName</h2>
                    <p class="fw-bold">SKU: @Product.ProductSKU</p>
                    <div class="mb-3">
                        
                        @*<a href="">
                            <span class="badge purple mr-1">A+</span>
                            </a>
                            <a href="">
                            <span class="badge blue mr-1">A</span>
                            </a>
                            <a href="">
                            <span class="badge red mr-1">B+</span>
                            </a>*@
                    </div>
                    <p class="lead">
                        <span class="mr-1">
                            <del>@Prices.ToString("c")</del>
                        </span>
                    </p>

                    <p>
                        <span>@Prices.ToString("c")</span>
                    </p>


                    <div class="row">

                        @foreach (var productPrice in Product.ProductPrices)
                        {
                            <div class="col-1 bg-light text-center pt-1 m-1" style="border:1px solid #28A745; border-radius:2px;box-shadow:2px">
                                <p>@productPrice.Condition</p>
                            </div>
                        }
                        
                    </div>
                    <p class="lead">10 In Stock</p>
                    <form class="d-flex justify-content-left">
                        <input type="number" value="1" aria-label="Search" class="form-control" style="width: 80px">


                    </form>
                    <br />
                    <button class="btn btn-dark btn-md my-0 p" type="submit">
                        Add to cart
                    </button>
                </div>
            </div>
        </div>
        <hr>
        <div class="row d-flex justify-content-center wow fadeIn">
            <div class="col-md-6 text-center">
                <h4 class="my-4 h4 fw-bold">Additional Information</h4>
                <p>
                    @((MarkupString)Product.Description)
                </p>
            </div>
        </div>
        <div class="row wow fadeIn">
            <div class="col-lg-4 col-md-12 mb-4">
                <img src="images/default.jpg" class="rounded img-fluid" alt="">
            </div>
            <div class="col-lg-4 col-md-6 mb-4">
                <img src="images/default.jpg" class="rounded img-fluid" alt="">
            </div>
            <div class="col-lg-4 col-md-6 mb-4">
                <img src="images/default.jpg" class="rounded img-fluid" alt="">
            </div>
        </div>
    </div>
</main>
}
@code {
    [Parameter]
    public int Id { get; set; }
    public ProductDTO Product { get; set; } = new();
    public IEnumerable<ProductPremiumDTO> ProductPrices { get; set; }
    public double Prices { get; set; } = 10000;
    public bool IsProcessing { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        Product = await _ProductService.GetById(Id);
        ProductPrices = Product.ProductPrices;
        StateHasChanged();
        IsProcessing = false;
        StateHasChanged();
    }

}