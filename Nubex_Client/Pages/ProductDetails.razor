@page "/Product/details/{Id:int}"
@page "/Product/details"
@inject IProductService _ProductService
@*@inject IPriceService _priceService*@
@using Nubex_Client.ViewModels
@using System.Xml.Serialization;
@inject IJSRuntime jsRuntime
@inject HttpClient Http

<style>
    .hor-scroll {
        overflow: auto;
        white-space: nowrap;
    }

        .hor-scroll img {
            display: inline-block;
        }
</style>
@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
    <EditForm Model="Product" OnValidSubmit="AddToCart" method="post">
        <DataAnnotationsValidator />
        <main class="mt-5 pt-4">
            <div class="container dark-grey-text mt-5">
                <div class="row wow fadeIn">
                    <div class="col-md-6 mb-4">
                        <img src="@Product.Image1" class="img-fluid" alt="">
                    </div>
                    <div class="col-md-6 mb-4">
                        <div class="p-4">
                            <h2 class="font-bold">@Product.ProductName</h2>
                            <p class="fw-bold">SKU: @Product.ProductSKU</p>

                            <p class="lead">
                                <span class="mr-1">
                                    <del>@((PricesDisplay + 500).ToString("c"))</del>
                                </span>
                            </p>

                            <p>
                                <span>@PricesDisplay.ToString("c")</span>
                            </p>


                            <div class="row">

                                @foreach (var productPrice in Product.ProductPrices)
                                {
                                    if (productPrice.Id == DetailsVM.SelectedProductPremiumId)
                                    {
                                        //This prduct premium selected
                                        <div class="col-1 bg-light text-center pt-1 m-1" style="border:2px solid #FFD700; border-radius:2px;box-shadow:2px">
                                            <p>@productPrice.Condition</p>
                                        </div>
                                    }
                                    else
                                    {
                                        //all other products

                                        <div class="col-1 bg-light text-center pt-1 m-1" style="border:1px solid; border-radius:2px;box-shadow:2px"
                                 @onclick="(args)=>SelectedProductPrice(args,productPrice.Id)">
                                            <p>@productPrice.Condition</p>
                                        </div>
                                    }
                                }

                          
                                
                            </div>

                            <form class="d-flex justify-content-left pt-3">
                                @if (!Product.ProductPrices.Any())
                                {
                                    <p class="text-warning">No Size available yet...</p>
                                }
                                else
                                {
                                    <div class="row">
                                        <div class="col-10">
                                            <InputNumber @bind-Value="DetailsVM.Count" class="form-control" />
                                            <ValidationMessage For="()=>DetailsVM.Count"></ValidationMessage>
                                        </div>
                                        <div class="col-2 text-primary"><h4>Count</h4></div>
                                    </div>
                                }
                            </form>
                                    <div class="row">
                                    <p class="lead">@Qty In Stock</p>
                                    </div>
                            <br />
                            <button class="btn btn-dark btn-md my-0 p" type="submit">
                                Add to cart
                            </button>
                        </div>
                    </div>
                </div>
                <hr>
                <div class="row d-flex justify-content-center wow fadeIn">
                    <div class="col-md-6 text-center">
                        <h4 class="my-4 h4 fw-bold">Additional Information</h4>
                        <p>
                            @((MarkupString)Product.Description)
                        </p>
                    </div>
                </div>
                <div class="row wow fadeIn">
                    <div class="col-lg-4 col-md-12 mb-4">
                        <img src="images/default.jpg" class="rounded img-fluid" alt="">
                    </div>
                    <div class="col-lg-4 col-md-6 mb-4">
                        <img src="images/default.jpg" class="rounded img-fluid" alt="">
                    </div>
                    <div class="col-lg-4 col-md-6 mb-4">
                        <img src="images/default.jpg" class="rounded img-fluid" alt="">
                    </div>
                </div>
            </div>
        </main>
    </EditForm>
}
@code {
    [Parameter]
    public int Id { get; set; }
    public ProductDTO Product { get; set; } = new();
    public ProductPremiumDTO ProductPrice { get; set; }
    public int Qty { get; set; }
    public double PricesDisplay { get; set; } = 0;
    public Prices priceDTO { get; set; } = new Prices();
    public golds AllPrice { get; set; } = new golds();

    public bool IsProcessing { get; set; }

    public DetailsVM DetailsVM { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        Product = await _ProductService.GetById(Id);
        //var result = await _priceService.GetPrice();
        SetPrice();
        StateHasChanged();
        IsProcessing = false;
        StateHasChanged();
    }
    private async Task SelectedProductPrice(MouseEventArgs e, int productPriceId)
    {
        DetailsVM.ProductPrice = Product.ProductPrices.FirstOrDefault(u => u.Id == productPriceId);
        DetailsVM.SelectedProductPremiumId = productPriceId;

    }

    private async Task AddToCart()
    {
        //ShoppingCart shoppingCart = new()
        //    {
        //        Count=DetailsVM.Count,
        //        ProductId=ProductId,
        //        ProductPriceId = DetailsVM.SelectedProductPriceId
        //    };

        //    await _cartService.IncrementCart(shoppingCart);
        //    _navigationManager.NavigateTo("/");
        //    await _jsRuntime.ToastrSuccess("Product added to cart successfully");
    }

    public async void SetPrice()
    {

        var url = new Uri("https://gold-feed.com/paid/d7d6s6d66k4j4658e6d6cds638940e/xmlgold_myr.php");
        //var url = new Uri("https://gold-feed.com/paid/d7d6s6d66k4j4658e6d6cds638940e/xmlgold_usd.php");
        var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
        using (HttpClient client = new HttpClient())
        {
            var result = await client.GetStreamAsync(url, cts.Token);
            if (result != null)
            {

                var xmlserial = new XmlSerializer(typeof(golds));
                using (var reader = new StreamReader(result))
                {
                    AllPrice = (golds)xmlserial.Deserialize(reader);

                }

                //Console.WriteLine(result);

            }
            else
            {
                Console.WriteLine("Error ");
            }
            }
                     priceDTO.goldPrice_Myr = AllPrice.gold.price / (decimal)31.1035;
                PricesDisplay = Math.Round(((double)priceDTO.goldPrice_Myr * Product.Weight), 2);
      
        //set Fake Price
        //PricesDisplay = 280 * Product.Weight * Product.Purify;

        // Set default price
        //var url = new Uri("https://gold-feed.com/paid/d7d6s6d66k4j4658e6d6cds638940e/xmlgold_myr.php");
        //var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
        //using (HttpClient client = new HttpClient())
        //{
        //    var result = await client.GetStringAsync("https://gold-feed.com/paid/d7d6s6d66k4j4658e6d6cds638940e/xmlgold_myr.php");
        //    if (result != null)
        //    {
        //        Console.WriteLine("result");
        //        //var xmlserial = new XmlSerializer(typeof(golds));
        //        //using (var reader = new StringReader(result))
        //        //{
        //        //    AllPrice = (golds)xmlserial.Deserialize(reader);

        //        //}
        //        //priceDTO.goldPrice_Myr = AllPrice.gold.price / (decimal)31.1035;
        //        //PricesDisplay = Math.Round(((double)priceDTO.goldPrice_Myr * Product.Weight), 2);
        //    }
        //    else
        //    {
        //        Console.WriteLine("ERROER");
        //    }
        //    }
        Console.Write("test");
        //use price service here...
        //AllPrice = await _priceService.GetPrice();
        //priceDTO.goldPrice_Myr = AllPrice.gold.price / (decimal)31.1035;
        //var pp = Math.Round(((double)priceDTO.goldPrice_Myr * Product.Weight), 2);
        //Prices = pp;

    }
}