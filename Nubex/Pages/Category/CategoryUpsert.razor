@page "/category/create"
@page "/category/edit/{Id:int}"
@inject ICategoryRepository categoryRepository
@inject NavigationManager _navigation
@attribute [Authorize]
<div class="row">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Category</h3>

    <div class="col-10">
        @if (IsLoading)
        {
            <div class="col-12">
                <progress class="progress-bar-animated w-100">
                    Loading in progress
                </progress>
            </div>
        }
        else
        {
            <EditForm Model="category" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator />
                @*<ValidationSummary/>*@
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="category.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>category.Name" />
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="category" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    public CategoryDTO category { get; set; } = new CategoryDTO();
    public string Title { get; set; } = "Create";
    public bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (Id == 0)
        {
            //create Category
            IsLoading = false;
        }
        else
        {
            //Edit Category
            Title = "Save";
            await Task.Run(LoadItem);
        }
    }

    private async Task LoadItem()
    {
        category = await categoryRepository.GetById(Id);
        IsLoading = false;
    }
    private async Task UpsertCategory()
    {
        if (category.Id == 0)
        {
            //create
          await categoryRepository.Create(category);
          
        }
        else
        {
            //update
           await categoryRepository.Update(category);
          
        }
        _navigation.NavigateTo("/Category");
    }
}
