@page "/Product"


@inject IProductRepository productRepository
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigation
@inject IFileUpload _fileUpload
@*<_DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>*@

<div class="row mt-4">
    <div class="col-6">

        <h4 class="card-title text-black-50">Product List</h4>
    </div>
    <div class=" col-2  offset-4  align-content-end">
        <a href="/product/create" class="btn btn-primary form-control" style="width:100%;">Add New Product</a>
    </div>



    <div class="col-12 p-3">

        @if (products.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>SKU</th>
                        <th>Purify</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in products)
                    {
                        <tr>
                            <td><img src="@item.Image1" class="img-thumbnail rounded-5" style="max-height:250px;min-block-size:fit-content;max-width:250px;"></td>
                            <td>@item.ProductName</td>
                            <th>@((MarkupString)item.Description)</th>
                            <td>@item.ProductSKU</td>
                            <td>@item.Purify</td>
                            <td>@item.Category.Name</td>
                            <td>
                                <NavLink href="@($"product/edit/{item.ProductId}")" class="btn btn-primary rounded-2">
                                    <span class="oi oi-pencil" aria-hidden="true" />
                                </NavLink>
                                <NavLink href="@($"product/price/{item.ProductId}")" class="btn btn-primary rounded-2">
                                    <span class="oi oi-dollar" aria-hidden="true" />
                                </NavLink>

                                <button @onclick="()=>HandleDelete(item.ProductId)" class="btn btn-danger rounded-2">
                                    <span class="oi oi-x" aria-hidden="true" />
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            @if (IsLoading)
            {
                //loading

                <div class="col-12">
                <progress class="progress-bar-animated w-100">

                </progress>
            </div>

            }
            else
            {

            }
        }
    </div>
</div>
@code {
    public IEnumerable<ProductDTO> products { get; set; } = new List<ProductDTO>();
    public bool IsLoading { get; set; }
    public ProductDTO DelProduct { get; set; } = new ProductDTO();
    public int DeleteProductId { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadItem();
        }
    }

    private async Task LoadItem()
    {
        IsLoading = true;
        StateHasChanged();
        products = await productRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task HandleDelete(int id)
    {
        DeleteProductId = id;
        //_jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
        IsLoading = true;
        if ( DeleteProductId != 0)
        {
            //delete
            ProductDTO product = await productRepository.GetById(DeleteProductId);
            if (!product.Image1.Contains("default.jpg"))
            {
                _fileUpload.DeleteFile(product.Image1);

            } 
            await productRepository.Delete(DeleteProductId);
            await _jsRuntime.ToastrSuccess("Product Deleted successfully");
            await LoadItem();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
    //public async Task ConfirmDelete_Click(bool isConfirmed)
    //{
    //    IsLoading = true;
    //    if (isConfirmed && DeleteProductId != 0)
    //    {
    //        //delete
    //        ProductDTO product = await productRepository.GetById(DeleteProductId);
    //        if (!product.Image1.Contains("default.jpg"))
    //        {
    //            _fileUpload.DeleteFile(product.Image1);

    //        }
    //        await productRepository.Delete(DeleteProductId);
    //        await _jsRuntime.ToastrSuccess("Product Deleted successfully");
    //        await LoadItem();
    //        await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
    //    }
    //    IsLoading = false;
    //}
}
